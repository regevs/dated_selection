initialize() {
	if (!exists("genomeSize"))
		defineConstant("genomeSize", 1000000);
	if (!exists("N"))
		defineConstant("N", 10000);
	if (!exists("U"))
		defineConstant("U", 0.02);
	if (!exists("s"))
		defineConstant("s", -0.01);
	if (!exists("N_generations"))
		defineConstant("N_generations", 20000);
	if (!exists("save_every"))
		defineConstant("save_every", 1000);
	if (!exists("print_every"))
		defineConstant("print_every", 1000);
	if (!exists("outputFile"))
		defineConstant("outputFile", "out.trees");
	
	initializeMutationRate(U/genomeSize);
	initializeTreeSeq(); // record trees for recapitation and/or adding neutral mutations later
	initializeMutationType("m1", 1.0, distributionType="f", s); // selected U_d
	// args are: name, dominance (1 for clarity in haploid), f for "fixed", s
	m1.convertToSubstitution = T;
	m1.mutationStackPolicy = "f"; // this was "l" before. not sure what that did
	
	initializeGenomicElementType("g1", c(m1), 1.0); // last is relative freqs of mutations
	// set last entry to 0,1 if you want no neutral mutations at this point	
	initializeGenomicElement(g1, 0, genomeSize);
	initializeRecombinationRate(0); // haploid
}

// generating initial population
1 early() {
	sim.addSubpop("p1", N);
	p1.setCloningRate(1.0); // haploid
}


1:100000000 late() {
	// remove any new mutations added to the disabled diploid genomes
	sim.subpopulations.individuals.genome2.removeMutations();
	// remove mutations in the haploid genomes that have fixed
	muts1 = sim.mutationsOfType(m1);
	freqs = sim.mutationFrequencies(NULL, muts1);
	if (any(freqs == 0.5)) {
		sim.subpopulations.genomes.removeMutations(muts1[freqs == 0.5], T);
	}
	if ((sim.cycle % print_every) == 0) {
		print("Generation reached: " + sim.cycle);
	}
	if ((sim.cycle % save_every) == 0) {
		sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
	}
	if (sim.cycle == N_generations) {
		sim.treeSeqOutput(outputFile, simplify = F);
		sim.simulationFinished();
	}
}
